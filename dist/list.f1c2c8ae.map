{"version":3,"sources":["list.js"],"names":["createList","value","createNode","appendList","list","node","next","removeFromList","x","p","data","travelList","fn","node2","node3","mode4","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5B,SAAOC,WAAWD,KAAX,CAAP;AACD,CAFD;AAGA,IAAME,aAAa,SAAbA,UAAa,CAACC,IAAD,EAAOH,KAAP,EAAiB;AAClC,MAAMI,OAAOH,WAAWD,KAAX,CAAb;AACAG,OAAKE,IAAL,GAAYD,IAAZ;AACA,SAAOA,IAAP;AACD,CAJD;;AAMA,IAAME,iBAAiB,SAAjBA,cAAiB,CAACH,IAAD,EAAOC,IAAP,EAAgB;AACrC,MAAIG,IAAIJ,IAAR;AACA,MAAIK,IAAIJ,IAAR;AACA,SAAOG,MAAMH,IAAN,IAAcG,MAAM,IAA3B,EAAiC;AAC/BC,QAAID,CAAJ;AACAA,QAAIA,EAAEF,IAAN;AACD;AACD;AACA;AACAG,IAAEH,IAAF,GAASE,EAAEF,IAAX;AACA,MAAIF,SAASC,IAAb,EAAmB;AACjB;AACA;AACAD,WAAOC,KAAKC,IAAZ;AACD,GAJD,MAIO;AACL;AACA;AACA,QAAIF,KAAKE,IAAL,KAAcD,IAAlB,EAAwB;AACtBD,WAAKE,IAAL,GAAYD,KAAKC,IAAjB;AACD,KAFD,MAEO;AACL;AACA;AACA,UAAIF,KAAKE,IAAL,CAAUA,IAAV,KAAmBD,IAAvB,EAA6B;AAC3BD,aAAKE,IAAL,CAAUA,IAAV,GAAiBD,KAAKC,IAAtB;AACD,OAFD,MAEO;AACL;AACA;AACA,YAAIF,KAAKE,IAAL,CAAUA,IAAV,CAAeA,IAAf,KAAwBD,IAA5B,EAAkC;AAChCD,eAAKE,IAAL,CAAUA,IAAV,CAAeA,IAAf,GAAsBD,KAAKC,IAA3B;AACD;AACF;AACF;AACF;AACF,CAjCD;AAkCAC,eAAeH,IAAf,EAAqBA,IAArB;;AAEA,IAAMF,aAAa,SAAbA,UAAa,CAACD,KAAD,EAAW;AAC5B,SAAO;AACLS,UAAMT,KADD;AAELK,UAAM;AAFD,GAAP;AAID,CALD;;AAOA,IAAMK,aAAa,SAAbA,UAAa,CAACP,IAAD,EAAOQ,EAAP,EAAc;AAC/B,MAAIJ,IAAIJ,IAAR;AACA,SAAOI,MAAM,IAAb,EAAmB;AACjBI,OAAGJ,CAAH;AACAA,QAAIA,EAAEF,IAAN;AACD;AACF,CAND;AAOA,IAAMF,OAAOJ,WAAW,EAAX,CAAb;AACA,IAAMa,QAAQV,WAAWC,IAAX,EAAiB,EAAjB,CAAd;AACA,IAAMU,QAAQX,WAAWC,IAAX,EAAiB,EAAjB,CAAd;AACA,IAAMW,QAAQZ,WAAWC,IAAX,EAAiB,EAAjB,CAAd;AACAO,WAAWP,IAAX,EAAiB,UAACC,IAAD,EAAU;AACzBW,UAAQC,GAAR,CAAYZ,KAAKK,IAAjB;AACD,CAFD","file":"list.f1c2c8ae.map","sourceRoot":"..\\src","sourcesContent":["const createList = (value) => {\r\n  return createNode(value);\r\n};\r\nconst appendList = (list, value) => {\r\n  const node = createNode(value);\r\n  list.next = node;\r\n  return node;\r\n};\r\n\r\nconst removeFromList = (list, node) => {\r\n  let x = list;\r\n  let p = node;\r\n  while (x !== node && x !== null) {\r\n    p = x;\r\n    x = x.next;\r\n  }\r\n  // console.log(p === null || x 的上一个节点)\r\n  // console.log(x === node || x === null)\r\n  p.next = x.next;\r\n  if (list === node) {\r\n    //如果删除的是第一个节点\r\n    //list指向第2个节点\r\n    list = node.next;\r\n  } else {\r\n    // 如果删除的是第二个节点\r\n    // 第1个节点.next = 第2个节点.next\r\n    if (list.next === node) {\r\n      list.next = node.next;\r\n    } else {\r\n      // 如果删除的是第三个节点\r\n      // 第2个节点.next = 第3个节点.next\r\n      if (list.next.next === node) {\r\n        list.next.next = node.next;\r\n      } else {\r\n        // 如果删除的是第4个节点\r\n        // 第3个节点.next = 第4个节点.next\r\n        if (list.next.next.next === node) {\r\n          list.next.next.next = node.next;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\nremoveFromList(list, list);\r\n\r\nconst createNode = (value) => {\r\n  return {\r\n    data: value,\r\n    next: null,\r\n  };\r\n};\r\n\r\nconst travelList = (list, fn) => {\r\n  let x = list;\r\n  while (x !== null) {\r\n    fn(x);\r\n    x = x.next;\r\n  }\r\n};\r\nconst list = createList(10);\r\nconst node2 = appendList(list, 20);\r\nconst node3 = appendList(list, 30);\r\nconst mode4 = appendList(list, 40);\r\ntravelList(list, (node) => {\r\n  console.log(node.data);\r\n});\r\n"]}