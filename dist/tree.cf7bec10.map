{"version":3,"sources":["tree.js"],"names":["createTree","value","data","children","parent","addChild","node","newNode","push","travel","tree","fn","i","length","find","result","undefined","removeNode","siblings","index","splice","node2","console","log"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAMA,aAAa,SAAbA,UAAa,CAACC,KAAD,EAAW;AAC5B,SAAO;AACLC,UAAMD,KADD;AAELE,cAAU,IAFL;AAGLC,YAAQ;AAHH,GAAP;AAKD,CAND;AAOA,IAAMC,WAAW,SAAXA,QAAW,CAACC,IAAD,EAAOL,KAAP,EAAiB;AAChC,MAAMM,UAAU;AACdL,UAAMD,KADQ;AAEdE,cAAU,IAFI;AAGdC,YAAQ;AAHM,GAAhB;AAKAE,OAAKH,QAAL,GAAgBG,KAAKH,QAAL,IAAiB,EAAjC;AACAG,OAAKH,QAAL,CAAcK,IAAd,CAAmBD,OAAnB;AACA,SAAOA,OAAP;AACD,CATD;AAUA,IAAME,SAAS,SAATA,MAAS,CAACC,IAAD,EAAOC,EAAP,EAAc;AAC3BA,KAAGD,IAAH;AACA,MAAI,CAACA,KAAKP,QAAV,EAAoB;AAClB;AACD;AACD,OAAK,IAAIS,IAAI,CAAb,EAAgBA,IAAIF,KAAKP,QAAL,CAAcU,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7CH,WAAOC,KAAKP,QAAL,CAAcS,CAAd,CAAP,EAAyBD,EAAzB;AACD;AACF,CARD;AASA,IAAMG,OAAO,SAAPA,IAAO,CAACJ,IAAD,EAAOJ,IAAP,EAAgB;AAC3B,MAAII,SAASJ,IAAb,EAAmB;AACjB,WAAOI,IAAP;AACD,GAFD,MAEO,IAAIA,KAAKP,QAAT,EAAmB;AACxB,SAAK,IAAIS,IAAI,CAAb,EAAgBA,IAAIF,KAAKP,QAAL,CAAcU,MAAlC,EAA0CD,GAA1C,EAA+C;AAC7C,UAAMG,SAASD,KAAKJ,KAAKP,QAAL,CAAcS,CAAd,CAAL,EAAuBN,IAAvB,CAAf;AACA,UAAIS,MAAJ,EAAY;AACV,eAAOA,MAAP;AACD;AACF;AACD,WAAOC,SAAP;AACD,GARM,MAQA;AACL,WAAOA,SAAP;AACD;AACF,CAdD;;AAgBA,IAAMC,aAAa,SAAbA,UAAa,CAACP,IAAD,EAAOJ,IAAP,EAAgB;AACjC,MAAMY,WAAWZ,KAAKF,MAAL,CAAYD,QAA7B;AACA,MAAIgB,QAAQ,CAAZ;AACA,OAAK,IAAIP,IAAI,CAAb,EAAgBA,IAAIM,SAASL,MAA7B,EAAqCD,GAArC,EAA0C;AACxC,QAAIM,SAASN,CAAT,MAAgBN,IAApB,EAA0B;AACxBa,cAAQ,CAAR;AACD;AACF;AACDD,WAASE,MAAT,CAAgBD,KAAhB,EAAuB,CAAvB;AACD,CATD;;AAWA,IAAMT,OAAOV,WAAW,EAAX,CAAb;AACA,IAAMqB,QAAQhB,SAASK,IAAT,EAAe,EAAf,CAAd;AACAL,SAASK,IAAT,EAAe,EAAf;AACAL,SAASK,IAAT,EAAe,EAAf;AACAL,SAASK,IAAT,EAAe,EAAf;AACAL,SAASgB,KAAT,EAAgB,GAAhB;AACAhB,SAASgB,KAAT,EAAgB,GAAhB;AACAhB,SAASgB,KAAT,EAAgB,GAAhB;AACAhB,SAASgB,KAAT,EAAgB,GAAhB;AACAC,QAAQC,GAAR,CAAYb,IAAZ;;AAEA,IAAMC,KAAK,SAALA,EAAK,CAACL,IAAD,EAAU;AACnBgB,UAAQC,GAAR,CAAYjB,KAAKJ,IAAjB;AACD,CAFD;AAGAO,OAAOC,IAAP,EAAaC,EAAb","file":"tree.cf7bec10.map","sourceRoot":"..\\src","sourcesContent":["const createTree = (value) => {\r\n  return {\r\n    data: value,\r\n    children: null,\r\n    parent: null,\r\n  };\r\n};\r\nconst addChild = (node, value) => {\r\n  const newNode = {\r\n    data: value,\r\n    children: null,\r\n    parent: null,\r\n  };\r\n  node.children = node.children || [];\r\n  node.children.push(newNode);\r\n  return newNode;\r\n};\r\nconst travel = (tree, fn) => {\r\n  fn(tree);\r\n  if (!tree.children) {\r\n    return;\r\n  }\r\n  for (let i = 0; i < tree.children.length; i++) {\r\n    travel(tree.children[i], fn);\r\n  }\r\n};\r\nconst find = (tree, node) => {\r\n  if (tree === node) {\r\n    return tree;\r\n  } else if (tree.children) {\r\n    for (let i = 0; i < tree.children.length; i++) {\r\n      const result = find(tree.children[i], node);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n    return undefined;\r\n  } else {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst removeNode = (tree, node) => {\r\n  const siblings = node.parent.children;\r\n  let index = 0;\r\n  for (let i = 1; i < siblings.length; i++) {\r\n    if (siblings[i] === node) {\r\n      index = 1;\r\n    }\r\n  }\r\n  siblings.splice(index, 1);\r\n};\r\n\r\nconst tree = createTree(10);\r\nconst node2 = addChild(tree, 20);\r\naddChild(tree, 30);\r\naddChild(tree, 40);\r\naddChild(tree, 50);\r\naddChild(node2, 201);\r\naddChild(node2, 202);\r\naddChild(node2, 203);\r\naddChild(node2, 204);\r\nconsole.log(tree);\r\n\r\nconst fn = (node) => {\r\n  console.log(node.data);\r\n};\r\ntravel(tree, fn);\r\n"]}